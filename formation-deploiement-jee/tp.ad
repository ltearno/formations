= Déploiement Java EE - Travaux pratiques
:author: Arnaud Tournier
:email: ltearno@gmail.com
:toc: macro
:toc-title: Plan des exercices
:imagesdir: images

IUT Blagnac LP APSIO - 2022 - LTE Consulting

Exercices liés au déploiement d'application Java EE.
Les principes mis en oeuvre ne sont pas spécifiques à Java EE mais y sont fortement adaptés.

toc::[]

////
Ce cours est open source et est disponible en ligne :

- QCM de validation : https://docs.google.com/forms/d/e/1FAIpQLSdTEX66_9kIJtjgRwegxnzWVMZBvbfnjt0KQVHuTTgeZ4QfhA/viewform?usp=pp_url

- cours en ligne : http://rezil.io/javaee/
- exercices en ligne : http://rezil.io/javaee/tp.html
////

== Exercice 1 : création d'une application Java EE très simple

=== Outils de développement

Vous pouvez utiliser les outils de votre choix (IDE comme Eclipse, IntelliJ, VSCode, ou autre vi, emacs...).

Si vous choisissez Eclipse, optez pour la variante "Java EE" de façon à profiter des outils Java EE dédiés.

Cependant, comme nous nous interressons aux tâches de CI (continuous integration) exécutées par des serveurs, nous ne focalisons pas sur l'IDE dans ces exercices. Nous allons tout faire en ligne de commande.

=== Télécharger Tomcat

Télécharger Tomcat en version 8.5.55 et l'extraire dans un répertoire (faites attention à ce que le chemin du répertoire de tomcat ne contienne pas d'espace).

Lien : https://archive.apache.org/dist/tomcat/tomcat-8/v8.5.55/bin/apache-tomcat-8.5.55.tar.gz (il existe aussi en zip)

=== Télécharger Maven

Maven sera utilisé pour construire le fichier `.war` qui sera ensuite déployé dans Tomcat.

- Lien : https://maven.apache.org/download.cgi
- Télécharger le fichier `apache-maven-3.8.1-bin.zip` (ou `.tar.gz`)

=== Extraire Maven et son installation

Extraire le fichier zip dans un répertoire de votre choix (sous Windows, n'utilisez pas le répertoire `Program Files`).

Ajouter le répertoire `VOTRE_REPERTOIRE/apache-maven-3.5.3-bin/bin` dans la variable d'environnement `PATH`.

Pour vérifier, vous devez pouvoir lancer `mvn -v`, maven imprimera sa version à l'écran, comme ceci :

```bash
$ mvn -v
Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)
Maven home: /.../formation-deploiement-jee/tp/etape-01/apache-maven-3.8.1
Java version: 11.0.11, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64
Default locale: fr_FR, platform encoding: UTF-8
OS name: "linux", version: "5.8.0-53-generic", arch: "amd64", family: "unix"
```

=== Compilation du squelette de projet Java EE Maven

Télécharger http://rezil.io/javaee/squelette-tp.zip c'est un squelette de projet de type _hello world_.

Aller dans le répertoire d'extraction

Taper `mvn install`

Normalement il télécharge plein de choses (la première fois), puis il finit par un message _success_.

Maven a construit le fichier `.war` contenant toutes les informations dont Tomcat a besoin pour exécuter notre application. Ce fichier `.war` se trouve 
dans le sous répertoire `target`.

=== Déploiement de l'application dans Tomcat

Pour déployer l'application dans le serveur Tomcat, vous copiez le fichier `target/tp-deploiement-1.0-SNAPSHOT.war` dans 
le sous-répertoire `webapps` de l'installation de Tomcat, que l'on appelle également le répertoire de déploiement.

A chaque fois que vous copierez une nouvelle version du `war` dans le répertoire de 
déploiement de Tomcat, celui-ci relance l'application (c'est le comportement par défaut, il est configurable).

=== Lancement de Tomcat

Lancez Tomcat depuis le répertoire `bin/` de Tomcat avec le script `startup.sh` (si vous êtes dans un bash CygWIN ou MinGW, sinon utilisez la 
version Windows Batch (`.bat`)).

Le programme indique que Tomcat est lancé. Par défaut il répondra avec le protocole HTTP sur le port 8080.

=== Accéder à l'application avec votre navigateur.

Vous devez pouvoir accéder à l'adresse `http://localhost:8080/tp-deploiement-1.0-SNAPSHOT/` dans un navigateur.

Normalement, la page s'affichant dans le navigateur correspond à l'exécution du fichier `index.jsp`.

C'est une application vraiment simple (qui ne possède aucun état).

Cette application affiche la propriété `catalina.base` qui reflète le répertoire d'installation de Tomcat.
Cette information nous sera utile quand nous déploierons de multiples instances de Tomcat pour gérer la haute-disponibilité.

=== Une application à état (simple)

Maintenant, c'est à vous de continuer le développement en codant !

Nous allons introduire un état conversationnel entre l'utilisateur et l'application, de façon à pouvoir étudier ensuite ce qu'il se
produira lorsque nous voudrons ajouter des fonctionalités d'élasticité et de haute disponibilité à celle-ci.

Une application, même des plus simple, a très souvent besoin de stocker l'état conversationnel entre elle et chacun de ses clients : c'est ce que l'on nomme en général la **session**.
Il s'agit souvent de l'_utilisateur connecté_ ou encore du _panier d'achats_ dans le cas d'un site de commerce.

La façon la plus courante d'implémenter ce mécanisme fait appel aux cookies et à un espace mémoire dans l'application. Lorsque le navigateur fait sa première requête au serveur, celui-ci
ajoute dans sa réponse http un header spécial `Set-Cookie` contenant une valeur aléatoire générée par l'application et seulement connue d'elle. L'application stocke ensuite dans une mémoire
associative (hash map ou table sql par exemple) l'association entre le nombre aléatoire et les informations de sessions, qui seront mises à jour au fur et à mesure du dialogue avec l'utilisateur.

Le protocole http stipule que le navigateur doit à partir de ce moment, toujours inclure ce _cookie_ dans les requêtes qu'il envoie à notre serveur (il fait cela en ajoutant aux requêtes un header `Cookie` correspondant). Ainsi dans le traitement des requêtes
suivantes, le serveur peut retrouver dans la mémoire associative les données associées à son dialogue avec l'utilisateur.

C'est ainsi que l'application peut faire le lien entre les différentes requêtes d'un utilisateur, et se souvenir par exemple, qu'il est correctement authentifié ou pas. Sans ce mécanisme, il faudrait
resaisir son login et mot de passe à chaque requête ! Il est assez sécurisé car le nombre étant aléatoire et secret, il sera impossible à deviner par un attaquant (pourvu qu'il soit grand, 
vraiment aléatoire et qu'on protège notre application par du _rate limiting_).


La norme Java EE fournit un mécanisme de HttpSession fonctionnant de cette façon (vous pouvez voir le cookie `JSESSIONID` dans les requêtes de votre navigateur vers des applications servies par Tomcat).
Nous allons dans l'exercice suivant utiliser ces fonctionalités offertes, mais aussi manipuler nous-mêmes un cookie, de façon à bien comprendre le mécanisme.

Notons au passage que par défaut, Tomcat stocke les données de session en mémoire vive et les vide sur disque en cas de plantage.

Nous allons introduire un état dans l'application en utilisant la session utilisateur et un cookie.

Notre application restera extrêmement simple, afin de nous concentrer sur les notions qui nous interressent. Elle ne contiendra qu'une seule page qui affiche :

- l'identifiant technique du serveur (obtenu avec la méthode `java.lang.management.ManagementFactory.getRuntimeMXBean().getName()`),
- le répertoire de déploiement de l'instance Tomcat (obtenu grâce à `System.getProperty("catalina.base")`),
- l'identifiant de session (`session.getId()`, `session` étant obtenu à partir de l'objet `HttpRequest` venant du serveur d'application),
- une chaine de caractère provenant du cookie `MONCOOKIE` que l'on trouve dans la requête HttpRequest du client. Si le client n'apporte pas de cookie, l'application devra générer une chaine aléatoire et demander au navigateur de la stocker comme cookie `MONCOOKIE` (on utilisera `response.addCookie(...)`).
- une chaine de caractère stockée dans la session et générée la première fois que la page est vue au cours d'une session,

Implémentez la page en modifiant le fichier `index.jsp` du projet squelette (si vous partez du projet squelette, mais ce n'est pas obligatoire). Vous pouvez bien sûr ajouter vos propres classes, faites comme vous l'entendez.

Déployez et vérifiez que l'application fonctionne.

A la première connexion la page doit afficher une valeur de session nulle, puis cette valeur est 
valorisée et stable au fur et à mesure des rafraichissements. Il en va de même pour la valeur issue du cookie.
C'est le comportement attendu d'une telle application.


Voici un exemple de rendu :

image::tp-etape-01.png[]


=== Comment effacer les cookies ?

Pour repartir de zéro sans cookie et un session vide, il suffit de supprimer tous les cookies associés à `localhost` dans votre navigateur, avec les outils de développement.

=== Ajout d'un compteur

Ajoutez maintenant le code nécessaire pour qu'un compteur s'affiche sur la page.

Ce compteur doit compter uniquement le nombre d'affichages particulier à chaque session. Par exemple, si
votre utilisateur ouvre un onglet avec navigation privée, le compteur doit repartir de zéro.

=== Comment fonctionne le principe de session ?

Expliquez le mécanisme associé aux sessions (c'est un mécanisme universel que vous retrouverez partout, identique à celui de PHP par exemple).



=== Cycle de développement

**ATTENTION, Tomcat ne doit pas être lancé avec Eclipse**

- coder dans Eclipse ou autre éditeur/IDE, sauvegarder
- en ligne de commande dans le projet : `mvn install`
- copie du `target/XXXX.war` dans le répertoire de déploiement de Tomcat
- actualisation dans le navigateur

=== Automatisation

Maintenant écrivez des scripts pour ne pas avoir à retaper les tâches manuelles répétitives (qui sont d'ailleurs très souvent source d'erreur).

- construction du war (simple appel à `mvn install`)
- copie du war dans le répertoire de Tomcat
- lancement de Tomcat.

=== Conclusions

La mise en oeuvre est très simple !

Mais quels sont les problèmes ?

- Crash serveur = arrêt du service
- Montée de version = arrêt du service
- Montée en charge (ok, si on peut fixer le nombre d'utilisateurs à l'avance).
- et bien d'autres, lesquels ?


















== Exercice 2 : déployer l'application sur deux Tomcat avec load balancing

Nous allons voir par la pratique comment les différentes façons de déployer notre application en cluster
impactent son fonctionnement.

=== Comment faire face au problème de crash serveur ?

Un crash serveur, c'est un service inaccessible pour le client, et c'est donc en général une perte d'argent pour l'entreprise.
Nous allons maintenant utiliser plusieurs serveurs (de préférences à différents points géographiques pour mitiger les risques 
de catastrophes naturelles). Un serveur frontal va router les requêtes http vers nos différents serveurs d'application. 
C'est le Load Balancer, il répartit les requêtes entrantes sur les serveurs d'application.

Nous allons installer un deuxième serveur Tomcat et NGINX configuré en Load balancer.

=== Installer la seconde instance de Tomcat

Dupliquez l'installation de Tomcat dans un autre répertoire de votre choix.

Editez le ficher `server.xml` de la deuxième installation et changez les ports de cette façon :

- HTTP : 8081
- Redirection : 8444
- AJP : 8010
- Shutdown port : 8006

Déployer l'application précédente sur les **deux** serveurs Tomcat.

[NOTE]
====
On peut faire un lien symbolique du war crée avec maven vers les répertoire de déploiement des Tomcat, ceci vous évitera des opérations répétitives !
Ceci se fait avec la commande `ln` :

[source,bash]
----
ln -s cible nom_du_lien
----
====

Dans deux terminaux différents, lancez chacun des Tomcat.

Vérifiez dans un navigateur que les deux Tomcat sont lancés sur les ports 8080 et 8081 et que l'application est bien déployée sur les deux serveurs.

=== Installer et configurer NGINX en Load Balancer

Passons à l'installation du répartiteur de charge `nginx`.

==== Sous Linux, famille Debian/Ubuntu

Tapez la commande suivante pour installer `nginx` :

----
apt install nginx-full
----

==== Sous Windows

Téléchargez l'archive de NGINX http://nginx.org/download/nginx-1.10.1.zip[ici].

Il faut ensuite l'extraire, de préférence à la racine d'un disque.

Configurez NGINX en Load Balancer avec la configuration suivante dans `/etc/nginx/nginx.conf` (sous Windows : `conf\nginx.conf`) :

----
http {
	# déclaration des backends
	upstream application {
		# premiere instance de Tomcat
		server 127.0.0.1:8080;
		# deuxième instance de Tomcat
		server 127.0.0.1:8081;
	}

	# configuration du serveur Web
	server {
		# Nginx écoutera sur le port 80 (par défaut en HTTP)
		listen 80;

		# toutes les URLs sont redirigées vers nos deux backends Tomcat
		location / {
			# référence à la partie upstream de la configuration
			proxy_pass http://application;
			# temps avant de considérer un backend comme défaillant
			proxy_connect_timeout 1;
		}
	}
}

events {
	# nombre de connexions simultanées
	worker_connections 768;
}
----

Lancez nginx (`sudo service nginx start`, ou `nginx.exe` sous Windows) et vérifiez que celui ce fonctionne (le processus est présent et actif, le port 80 est ouvert, vérifier les logs de nginx sinon).
Nginx doit rediriger les requêtes sur le port 80 vers les tomcats (écoutant sur les ports 8080 et 8081). 

Le serveur nginx répond sur le port 80, il faut donc adapter l'url dans le navigateur. Rechargez plusieurs fois la page pour vérifier que le load balancing se fait bien alternativement entre les deux serveurs (le répertoire de déploiement affiché doit changer une fois sur deux).

Tuez un des deux serveurs :

- on recherche le bon processus Tomcat avec `ps -Af | grep java`,
- puis on le tue avec `kill ID_PROCESSUS`.

[NOTE]
====
Sous Windows, utilisez l'utilitaire approprié pour repérer et tuer le processus, par exemple `Process Explorer`.
====

On peut également utiliser le script `shutdown.sh` (ou `shutdown.bat` sous Windows) dans le répertoire de Tomcat pour tuer le processus de la façon recommandée (mais cela correspond moins à une panne intempestive que l'on souhaite simuler).

Vérifier que l'application fonctionne toujours quand on y accède par nginx.

*Nginx détecte l'erreur sur le serveur arrêté et poursuit sur le serveur qui fonctionne.*

=== Au passage, quels ont été les freins à l'automatisation ?

- Copie du fichier `.war` à la main, difficilement automatisable.
- Lancement et arrêt des serveurs manuel.
- Et en plus, les sources ne sont pas versionnées !

Pour gagner du temps les prochaines fois, créez vous les scripts nécessaires au déploiement de l'application (copie du `.war`) et 
aux démarrage et arrêt des serveurs.

=== Déployer sur les deux Tomcats

Vous constatez certainement un problème. En effet la gestion des sessions faite par Tomcat est perturbée par 
le fait que l'on ai distribué et réparti l'application sur deux serveurs. La session est stockée localement par 
serveur Tomcat donc on a en fait deux sessions stockées sur deux serveurs différents. A chaque fois le Tomcat 
qui exécute la requête ne trouve pas la session puisqu'il s'agit en fait de l'identificateur produit par l'autre Tomcat 
(Java EE se base sur le cookie `JSESSIONID` pour retrouver la session)...

=== Problème des sessions

Java EE ne prévoit pas de façon standardisée le stockage des sessions en environnement distribué. Chaque serveur d'application fournit sa propre solution.

En standard Java EE prévoit que les données de session soient stokées relativement au serveur qui s'exécute.

=== Trois solutions enisageables

- Faire du sticky session. Nginx peut être configuré pour envoyer les clients sur le même serveur.

- Stocker la session dans une même base de donnée pour tous les serveurs.

- Utiliser JWT pour envoyer nos informations de "session" à partir du client. L'information est chifrée dans un cookie qui est transmis par le navigateur et qui reste le même quelque soit le client.

==== Sticky load balancer

Le Load Balancer (Nginx) calcule un hash basé sur l'adresse IP du client et route la requête vers le serveur correspondant. Une même IP cliente est donc toujours routée vers la même instance du backend.

Rajouter `ip_hash;` dans la section `upstream` de la configuration de Nginx.

Relancer Nginx.

Constater que maintenant la session est stable.

Mais si on arrête le serveur choisi par Nginx, que se passe-t-il ?

On perd la session quand le serveur crashe ! Donc l'utilisateur connecté, son panier etc...

AVANTAGE :

- on ne peut pas faire plus simple ! Et l'application survit bien au crash d'un de ses serveurs.

INCONVENIENTS :

- mauvaise répartition de la charge.
- Quand un des serveurs crashe on perd les sessions de tous les utilisateurs qui y étaient connectés. Pas très bon pour les affaires...

Pour les détails de la configuration de Nginx en load balancer, on peut se référer à cette page : http://nginx.org/en/docs/http/load_balancing.html.










== Exercice 3 : Déport de la session dans une base externe

Le phénomène de perte de session précédent est l'effet du fonctionnement interne du serveur d'application Java EE.

Pour le résoudre, on déporte le stockage des données de session (l'"état" de l'application à chaque requête) à l'extérieur des serveurs d'application Java EE.

On peut soit utiliser des solutions de clustering propre à chaque distributeur (JBoss, WebLogic, ...).

Ou bien implémenter sa propre solution, afin de comprendre les mécanismes en jeu.

Nous allons utiliser une solution simple proposée en standard par Apache Tomcat : le stockage des sessions dans une base de donnée MySQL.

Retirer `ip_hash;` de la configuration de Nginx et redémarrer celui-ci.

=== Préparation de MySQL

On va utiliser MySQL, mais il est plus intéressant dans un contexte distribué d'utiliser une base de données distribuée (Hazelcast, Redis, Memcached, CouchDB ou autre...)

Installer MariaDB, une version open source 100% compatible avec MySQL :

==== Sous Linux

		apt install mariadb-server

Ne pas donner de mot de passe.

==== Sous Windows

Sous Windows une façon simple d'installer MySQL est d'installer http://www.wampserver.com/[WAMP] puis de ne démarrer que le serveur MySQL (on ne démarre pas Apache). 

Ensuite on crée la base de donnée et la table qui va stocker les données de session pour les serveurs Tomcat :

[NOTE]
====
Sous Windows, on peut utiliser PhpMyAdmin pour exécuter des instructions SQL. PhpMyAdmin est installé par défaut avec WAMP.
====

==== Création de l'utilisateur `tomcat`

Créez un utilisateur `tomcat` dans le serveur MySQL. Cet utilisateur sera utilisé pour connecter le serveur Tomcat à la base de données.


////
TODO: Ajouter un mot de passe
////

===== Création de la base de données des sessions

----
create database tomcat_sessions;

use tomcat_sessions;

create table tomcat_sessions (
  session_id     varchar(100) not null primary key,
  valid_session  char(1) not null,
  max_inactive   int not null,
  last_access    bigint not null,
  app_name       varchar(255),
  session_data   mediumblob,
  KEY kapp_name(app_name)
);
----

Donnez à l'utilisateur `tomcat` tous les droits d'accès en lecture et d'écriture à la base `tomcat_sessions`.

=== Paramétrage de Tomcat

Télécharger le connecteur JDBC pour MySQL qui est requis pour que Tomcat puisse accéder à la base de données.

Le fichier JAR est disponible à cette adresse : https://search.maven.org/remotecontent?filepath=mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar

[NOTE]
====
Pour trouver l'adresse du fichier jar lorsqu'une nouvelle version sera sortie, on pourra utiliser cette http://search.maven.org[url] et rechercher l'artéfact `mysql:mysql-connector-java` pour télécharger le connecteur JDBC pour MySql. Il faudra prendre la dernière `5.1.x`.
====

Copier le connecteur MySql dans le répertoire lib des deux tomcats :

----
cp mysql-connector-java-5.1.47.jar REPERTOIRE_DU_PREMIER_TOMCAT/lib/
cp mysql-connector-java-5.1.47.jar REPERTOIRE_DU_DEUXIEME_TOMCAT/lib/
----

Créer un fichier de contexte pour l'application, de façon à spécifier au serveur d'application (Tomcat) que l'on désire stocker les sessions à l'extérieur sur une base de donnée. Le fichier à créer est `src/main/webapp/META-INF/context.xml` pour un projet Maven, et dans `WebContent/META-INF/context.xml`.

Voici le contenu de ce fichier :

[source,xml]
----
<?xml version='1.0' encoding='utf-8'?>
<Context>
	<Valve className="org.apache.catalina.valves.PersistentValve"/> <1>

	<Manager className="org.apache.catalina.session.PersistentManager" > <2>
		<Store
			className="org.apache.catalina.session.JDBCStore" <3>
			connectionURL="jdbc:mysql://localhost/tomcat_sessions?user=root" <4>
			driverName="com.mysql.jdbc.Driver"
			sessionAppCol="app_name"
			sessionDataCol="session_data"
			sessionIdCol="session_id"
			sessionLastAccessedCol="last_access"
			sessionMaxInactiveCol="max_inactive"
			sessionTable="tomcat_sessions" <5>
			sessionValidCol="valid_session" />
	</Manager>
</Context>
----
<1> utilisation du stockage à chaque session
<2> utilisation du composant de persistance des sessions
<3> utilisation du stockage par JDBC (implémentation de `org.apache.catalina.Store`)
<4> url JDBC de connexion à la bdd des sessions
<5> nom de la table utilisée pour le stockage les sessions

////
TODO: Utiliser le mot de passe dans la connexion JDBC et non pas le user root
////

Construire le projet (`mvn install` avec Maven, ou exporter un WAR avec Eclipse) et le déployer sur les deux Tomcats. Vérifier que Nginx est toujours actif.

Rafraîchir la page, que se passe-t-il ?

La session reste stable même si le serveur d'application sollicité change.

=== Conclusion

AVANTAGES:

- compatible Java EE, l'utilisation de l'API des sessions ne change pas
- le load balancer est libre de choisir le serveur le plus adapté à la charge actuelle de l'infrastructure.

INCONVENIENTS:

- une connexion (ou pas) à la base de données à chaque requête.
- crée un goulot d'étranglement vers la base de données.
- mais on peut utiliser une base distribuée.
- on a un serveur de base de donnée à gérer en plus !
- les resources ne sont pas forcément bien gérées non plus : on va avoir tendance à ne pas remplir les serveurs ce qui empêche de les mettre à l'arrêt... Solution : remettre les sticky-sessions pour avoir le meilleur des deux mondes.




== Exercice 4 : Utilisation de JWT

Il est également possible de stocker des données directement dans le navigateur des utilisateurs, et ce de manière sécurisée !

Pour cela on chiffre les données sur le serveur avec une clée privée (donc secrète) et on positionne le résultat du chiffrement dans un cookie.

[NOTE]
====
Il est également possible de simplement _signer_ les informations de session. Elles seront lisibles par l'utilisateur mais il ne pourra pas les modifier sans passer inaperçu.
====

Au traitement des requêtes suivantes, il suffit de déchiffrer le cookie pour retrouver l'information et s'assurer de leur non-altération.

Une spécification existe, c'est JWT (Json Web Token).

Nous allons utiliser JJWT, une bibliothèque open source pour la gestion de JWT :

Pour un projet utilisant Maven, vous pouvez simplement ajouter ce bout de XML dans le fichier `pom.xml` dans le noeud `dependencies` :

[source,xml]
----
<dependency>
	<groupId>io.jsonwebtoken</groupId>
	<artifactId>jjwt</artifactId>
	<version>0.6.0</version>
</dependency>
----

[NOTE]
====
Pour un projet n'utilisant pas Maven, vous pouvez télécharger le fichier jar en allant sur http://search.maven.org[maven central] et en recherchant l'artéfact `jjwt`. Le fichier jar est disponible en cliquant sur le lien `jar` qui doit apparaitre en résultat de recherche. Ce fichier sera à copier dans le répertoire `WEB-INF/lib` de votre application (à créer si nécessaire).
====

////
Si votre projet n'est pas géré avec Maven, vous pouvez télécharger directement toutes les dépendances de JJWT avec le http://lteconsulting.fr/javaee-deploiement/jjwt-dependencies.zip[lien].
////

[source,java]
----
// chiffrer l'information 'Subject'
String s = Jwts.builder().setSubject("Joe").signWith(SignatureAlgorithm.HS512, key).compact();

// déchiffrer l'information
Jwts.parser().setSigningKey(key).parseClaimsJws(s).getBody().getSubject(); // renvoie "Joe"

// création d'une clé de chiffrement
Key createKey() {
	SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;

	byte[] apiKeySecretBytes = "alja lkejhe kjhdaoiuha ofygfakhfkjhg".getBytes();

	Key key = new SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());

	return key;
}
----

== Exercice 5 : stockage d'une information de session dans un jeton JWT

Ecrivez maintenant le code nécessaire pour stocker dans le jeton JWT le _pseudo_ de l'utilisateur.

A cette fin, vous aurez à écrire un formulaire web permettant à l'utilisateur de saisir son pseudo. La page d'accueil devra ensuite afficher ce pseudo, contenu dans le jeton JWT.

AVANTAGES:

- l'état est conservé côté client, ce qui allège considérablement la charge serveur.
- permet une infrastructure réellement stateless
- sécurisé

INCONVENIENTS:

- le chiffrement peut être couteux et nécessiter du métériel dédié
- le stockage et la gestion des clés privés peut être problématique
- impraticable pour stocker des données volumineuses

=== Et la sécurité ?

Attention à la gestion des clés avec l'utilisation de JWT !

Pour HTTPS on peut utiliser des machines de chiffrement en bordure de réseau.

Ne pas oublier cette dimension qui n'a été que très peu abordée dans ce cours...

=== Conclusion

Toujours une histoire de compromis, il faut choisir le meilleur entre :

- réponse à la demande,
- complexité de la solution,
- productivité.

== Exercice 6 : Déploiement de l'application avec Docker.

=== Installation de Docker

Voir la https://docs.docker.com/engine/installation/linux/debian/[documentation officielle]...

----
# La version noyau doit être supérieur à 3.10
# Le système doit être 64 bits
uname -r

sudo apt-get install docker.io
----

Téléchargement de l'image officielle de Tomcat en version 8.0.35, avec un environnement Java 8 :

----
docker pull tomcat:8.0.35-jre8
----

Nous créons un fichier `Dockerfile` pour créer une image consistant en :

- l'image Tomcat que nous venons de télécharger
- notre application, dans le répertoire de déploiement de Tomcat, à l'intérieur de l'image.

Voici le contenu du fichier :

----
FROM tomcat:8.0.35-jre8 <1>
COPY target/deploiement-1.0-SNAPSHOT.war /usr/local/tomcat/webapps/ <2>
----
<1> image officielle de Tomcat pour commencer
<2> copie du war de l'application dans le répertoire de déploiement de Tomcat

Ensuite nous créons effectivement l'image à partir du `Dockerfile` :

----
docker build -t ltearno/application:latest .

# => Successfully built a867b1c2e8ae
----

Lancez l'image en intéractif pour voir :

----
docker run  -it --rm -p 8080:8080 ltearno/application:latest
----

Vous devez voir les logs de Tomcat s'imprimer à l'écran jusqu'au message de fin de démarrage.

Comme nous avons indiqué un mappage de port (`-p 8080:8080`), il est possible d'accéder à l'application
à partir de l'url 'http://localhost:8080'. Vérifiez que cela fonctionne bien.

Tuez l'image avec `Ctrl+C`.

Lancer l'image dix fois, en mode démon (`-d`) :

----
docker run -d -p 8080:8080 ltearno/application:latest
docker run -d -p 8081:8080 ltearno/application:latest
docker run -d -p 8082:8080 ltearno/application:latest
docker run -d -p 8083:8080 ltearno/application:latest
docker run -d -p 8084:8080 ltearno/application:latest
docker run -d -p 8085:8080 ltearno/application:latest
docker run -d -p 8086:8080 ltearno/application:latest
docker run -d -p 8087:8080 ltearno/application:latest
docker run -d -p 8088:8080 ltearno/application:latest
docker run -d -p 8089:8080 ltearno/application:latest
----

[NOTE]
====
On n'a plus besoin de changer le port d'écoute de Tomcat dans sa configuration, 
ceci est fait *depuis l'extérieur* de l'application avec docker.

Pour l'application, l'exécution s'effectue dans des environnements strictement
identiques, c'est un des bénéfices de Docker.
====

Il est possible de consulter la liste des containers :

----
arnaud@arnaud-debian:~/deploiement$ docker ps -a
CONTAINER ID        IMAGE                        COMMAND             CREATED             STATUS              PORTS                    NAMES
82fa4257fe41        ltearno/application:latest   "catalina.sh run"   21 seconds ago      Up 21 seconds       0.0.0.0:8089->8080/tcp   sharp_hodgkin
689bf0375e14        ltearno/application:latest   "catalina.sh run"   24 seconds ago      Up 23 seconds       0.0.0.0:8088->8080/tcp   berserk_cori
4be52fa3e953        ltearno/application:latest   "catalina.sh run"   24 seconds ago      Up 24 seconds       0.0.0.0:8087->8080/tcp   angry_colden
fa7d70b4418a        ltearno/application:latest   "catalina.sh run"   25 seconds ago      Up 25 seconds       0.0.0.0:8086->8080/tcp   mad_leakey
50d31fa22616        ltearno/application:latest   "catalina.sh run"   26 seconds ago      Up 26 seconds       0.0.0.0:8084->8080/tcp   stupefied_euclid
744666ee4b0b        ltearno/application:latest   "catalina.sh run"   26 seconds ago      Up 25 seconds       0.0.0.0:8085->8080/tcp   agitated_bohr
62aae97404a7        ltearno/application:latest   "catalina.sh run"   27 seconds ago      Up 27 seconds       0.0.0.0:8083->8080/tcp   distracted_elion
2bce8ed38ed3        ltearno/application:latest   "catalina.sh run"   28 seconds ago      Up 28 seconds       0.0.0.0:8082->8080/tcp   distracted_mestorf
b244f8af49fd        ltearno/application:latest   "catalina.sh run"   29 seconds ago      Up 28 seconds       0.0.0.0:8081->8080/tcp   happy_blackwell
fc285815ea12        ltearno/application:latest   "catalina.sh run"   29 seconds ago      Up 29 seconds       0.0.0.0:8080->8080/tcp   sharp_kowalevski
arnaud@arnaud-debian:~/deploiement$
----

Pour stopper tous les containers :

----
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
----

Editez la configuration Nginx pour prendre en compte les nouveaux ports TCP. Relancer Nginx (`sudo nginx -s reload`).

Avec le navigateur, constater que les dix serveurs Tomcat sont alternativement utilisés.

Tuer quelques containers pour constater que l'application n'est nullement dérangée.

== Exercice 7 : Gérer notre application avec Kubernetes

Voir la http://kubernetes.io/docs/getting-started-guides/docker/[doc] pour commencer.

=== Installation et création d'un cluster de développement

Dans un environnement de production Kubernetes permet de gérer un cluster de machines physiques ou virtuelles.
Il peut même piloter des services cloud (GCP, AWS, ...) pour créer des machines virtuelles et lancer les conteneurs
apprpriés.

Ici nous allons installer K8S sur notre machine de développement. Notre cluster sera donc réduit à un noeud.

----
# choix de la version de Kubernetes
export K8S_VERSION=$(curl -sS https://storage.googleapis.com/kubernetes-release/release/stable.txt)

# lancement de Kubernetes au sein d'un container Docker
export ARCH=amd64
docker run -d \
    --volume=/:/rootfs:ro \
    --volume=/sys:/sys:rw \
    --volume=/var/lib/docker/:/var/lib/docker:rw \
    --volume=/var/lib/kubelet/:/var/lib/kubelet:rw \
    --volume=/var/run:/var/run:rw \
    --net=host \
    --pid=host \
    --privileged \
    gcr.io/google_containers/hyperkube-${ARCH}:${K8S_VERSION} \
    /hyperkube kubelet \
        --containerized \
        --hostname-override=127.0.0.1 \
        --api-servers=http://localhost:8080 \
        --config=/etc/kubernetes/manifests \
        --cluster-dns=10.0.0.10 \
        --cluster-domain=cluster.local \
        --allow-privileged --v=2

# installation de kubectl
sudo bash
curl -sSL "http://storage.googleapis.com/kubernetes-release/release/v1.2.0/bin/linux/amd64/kubectl" > /usr/bin/kubectl
chmod +x /usr/bin/kubectl
exit

# configuration du cluster local
kubectl config set-cluster mon-cluster --server=http://localhost:8080
kubectl config set-context mon-cluster --cluster=mon-cluster
kubectl config use-context mon-cluster

# on vérifie que le tout est bien configuré
kubectl get nodes
# (on doit voir la liste des noeuds, c'est à dire un noeud 127.0.0.1)
----

=== Exécution de l'application

Kubernetes est maintenant prêt à recevoir les commandes de création de clusters.

----
# création et lancement d'un déploiement de l'image nginx
kubectl run nginx --image=nginx --port=80

# on expose ce déploiement sur le port 80
kubectl expose deployment nginx --port=80

# pour obtenir l'adresse exposée par ce déploiement
kubectl get svc nginx --template={{.spec.clusterIP}}
----

Tester le serveur Nginx dans sa version standard dans un navigateur puis pour arrêter et effacer ce cluster.

----
kubectl delete deployment nginx

# création du pod
kubectl create -f ./application-pod.yaml

# liste des pods
kubectl get pods

kubectl delete pod application
----

Ceci termine l'exercice d'introduction à Kubernetes.

== Exercice 8 : Utilisation de `JMeter` pour analyser les stratégies de déploiement

Groupez vous par groupe de 8 personnes.

Utilisez :

- une machine avec le load balancer,
- une machine avec la base de données des sessions,
- une machine avec `JMeter`,
- le reste des machines avec les serveurs d'application.

Lancez un benchmark JMeter pour chacune des stratégies :

- déploiement sur une seule machine,
- déploiement sur 2, 3 etc... machines.

Analysez le niveau de sollicitation de chaque composant de l'application distribuée.

Pour simuler une application un peu gourmande en CPU, vous pouvez utiliser la méthode suivante :

[source,language=java]
----
public static void spinCPU(long durationInMillisecond){
	long start = System.currentTimeMillis();
	while(System.currentTimeMillis()-start < durationInMillisecond)
		;
}
----

Analysez ensuite la résistance des différents déploiements 
aux erreurs matérielles comme par exemple extinction brutale d'un des serveurs d'application.

== Bilan

Voici les étapes successives réalisées pendant ces travaux pratiques.

[options="header"]
|==================
|Etape
|Création du projet Java EE dans Eclipse
|Affichage du répertoire de déploiement dans `index.jsp`
|Création du fichier `.war`
|Déploiement du fichier `.war` dans le répertoire de déploiement de Tomcat
|Démarrage de Tomcat en ligne de commande
|Arrêt de Tomcat en ligne de commande
|Mise en place de la donnée en session (code en plus dans l'application)
|Installation et configuration d'un deuxième Tomcat
|Installation de NGINX
|Déploiement en mode un LB et deux AP (Application Serveur, les deux Tomcat)
|Pourquoi les sessions ne sont-elles pas stables ?
|Configuration en _sticky session_
|Installation de MySQL
|Configuration des Tomcat pour déporter les sessions en base de données
|Mise en place de JWT
|Stockage du pseudo de l'utilisateur dans un token JWT
|Déploiement de l'application avec Docker (une dizaine d'instance + NGINX)
|Utilisation de `Kubernetes`
|Déploiement sur un vrai cluster
|JMeter
|==================





== Barême

- Mise en place du projet Maven : 1 point
- Ecriture du code Java / JSP du premier exercice : 1 point
- Installation et configuration du deuxième Tomcat : 1 point
- Installation et configuration de Nginx : 1 point
- Ecriture des scripts d'automatisation (build maven, copie du war) : 2 points
- Déploiement en mode Load Balancer avec deux Tomcat : 2 points
- Configuration des Tomcats pour déporter les sessions en bases de données : 2 points
- Mise en place des jetons JWT : 2 points
- Stockage du pseudo de l'utilisateur dans un token JWT : 2 points

Total de 14 points ajusté avec une règle de trois pour arriver à une note de 20.

[NOTE]
====
Le QCM sera noté sur 10 points.

La somme de ces notes sera ramenée également à une note de 20. Le TP est donc deux fois plus important que le QCM (pour les points).
====








== Troubleshooting / Problèmes courants

=== Sous Eclipse, une erreur dans un fichier .jsp : "javax.servlet.HttpServletRequest has not been found in the Java Build Path"

Ne pas prendre en compte cette erreur, c'est juste Eclipse qui est à la rue !

=== `JAVA_HOME` n'est pas défini

En ligne de commande, le démarrage de Tomcat échoue à cause de cette erreur.

C'est avec cette variable que Tomcat détecte le répertoire 
d'installation de la version de Java à utiliser.

Solution :

- trouver le répertoire d'installation de Java (choisir un JDK et non un JRE) (sous Windows, c'est souvent : `C:\Program Files\Java\jdk1.8`)
- alimenter la variable d'environnement avec ce répertoire.

==== Sous Windows

- Dans la barre "rechercher", taper "environnement" et sélectionner "Modifier les variables d'environnement"
- Choisir "Utilisateur" (bouton "Pour votre compte..."),
- Choisir "Nouvelle ..."
- Nom de la variable : `JAVA_HOME`, et comme valeur le chemin d'installation de Java
- A ce stade les variables sont positionnées, **MAIS** il faut redémarrer la console ligne de commande pour qu'elles soient prises en compte